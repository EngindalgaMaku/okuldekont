// Temporary stub file - all files using this should be migrated to Prisma
export const supabase = {
  from: () => ({
    select: () => Promise.resolve({ data: null, error: 'This page needs to be migrated to Prisma' }),
    insert: () => Promise.resolve({ data: null, error: 'This page needs to be migrated to Prisma' }),
    update: () => Promise.resolve({ data: null, error: 'This page needs to be migrated to Prisma' }),
    delete: () => Promise.resolve({ data: null, error: 'This page needs to be migrated to Prisma' }),
    eq: function() { return this; },
    in: function() { return this; },
    order: function() { return this; },
    range: function() { return this; },
    limit: function() { return this; },
    single: function() { return this; },
    filter: function() { return this; },
    match: function() { return this; },
    ilike: function() { return this; },
    gte: function() { return this; },
    lte: function() { return this; },
    gt: function() { return this; },
    lt: function() { return this; },
    not: function() { return this; },
    is: function() { return this; },
    contains: function() { return this; },
    count: function() { return this; },
    maybeSingle: function() { return this; },
    head: function() { return this; },
    neq: function() { return this; },
    overlaps: function() { return this; },
    textSearch: function() { return this; },
    adjacent: function() { return this; },
    or: function() { return this; },
    and: function() { return this; },
    csv: function() { return this; },
    explain: function() { return this; },
    abortSignal: function() { return this; },
    throwOnError: function() { return this; },
    then: function() { return this; },
    catch: function() { return this; },
    finally: function() { return this; },
  }),
  rpc: () => Promise.resolve({ data: null, error: 'This page needs to be migrated to Prisma' }),
  storage: {
    from: () => ({
      upload: () => Promise.resolve({ data: null, error: 'This page needs to be migrated to Prisma' }),
      download: () => Promise.resolve({ data: null, error: 'This page needs to be migrated to Prisma' }),
      remove: () => Promise.resolve({ data: null, error: 'This page needs to be migrated to Prisma' }),
      list: () => Promise.resolve({ data: null, error: 'This page needs to be migrated to Prisma' }),
      getPublicUrl: () => ({ data: { publicUrl: '' } }),
      createSignedUrl: () => Promise.resolve({ data: { signedUrl: '' }, error: 'This page needs to be migrated to Prisma' }),
      createSignedUrls: () => Promise.resolve({ data: [], error: 'This page needs to be migrated to Prisma' }),
    })
  }
};
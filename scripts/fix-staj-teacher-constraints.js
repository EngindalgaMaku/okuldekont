const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function fixStajTeacherConstraints() {
  console.log('üîß Staj-√ñƒüretmen Kƒ±sƒ±tlamalarƒ± D√ºzeltiliyor...')
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê')
  
  try {
    // 1. √ñnce staj tablosundaki ogretmen_id alanƒ±nƒ± nullable yap
    console.log('üìã 1. Staj tablosundaki ogretmen_id constraint\'i kaldƒ±rƒ±lƒ±yor...')
    
    const { error: alterError } = await supabase.rpc('exec_sql', {
      query: 'ALTER TABLE stajlar ALTER COLUMN ogretmen_id DROP NOT NULL;'
    })
    
    if (alterError) {
      console.log('‚ö†Ô∏è  Constraint kaldƒ±rma hatasƒ± (zaten kaldƒ±rƒ±lmƒ±≈ü olabilir):', alterError.message)
    } else {
      console.log('‚úÖ Constraint ba≈üarƒ±yla kaldƒ±rƒ±ldƒ±')
    }

    // 2. Eksik √∂ƒüretmen ID'lerini tespit et ve null yap
    console.log('\nüìã 2. Eksik √∂ƒüretmen ID\'leri tespit ediliyor...')
    
    const { data: stajlar } = await supabase
      .from('stajlar')
      .select('id, ogretmen_id')
      .not('ogretmen_id', 'is', null)
    
    if (!stajlar) {
      console.log('‚ùå Staj verileri alƒ±namadƒ±')
      return
    }
    
    console.log(`üìä ${stajlar.length} staj kaydƒ± kontrol ediliyor...`)
    
    let fixedCount = 0
    let checkedCount = 0
    
    for (const staj of stajlar) {
      checkedCount++
      if (checkedCount % 10 === 0) {
        console.log(`   ƒ∞≈ülenen: ${checkedCount}/${stajlar.length}`)
      }
      
      // √ñƒüretmen var mƒ± kontrol et
      const { data: teacher } = await supabase
        .from('ogretmenler')
        .select('id, ad, soyad, aktif')
        .eq('id', staj.ogretmen_id)
        .single()
      
      if (!teacher) {
        // √ñƒüretmen yoksa ogretmen_id'yi null yap
        const { error: updateError } = await supabase
          .from('stajlar')
          .update({ ogretmen_id: null })
          .eq('id', staj.id)
        
        if (updateError) {
          console.log(`‚ùå Staj ${staj.id} g√ºncellenemedi:`, updateError.message)
        } else {
          fixedCount++
        }
      }
    }
    
    console.log(`\n‚úÖ ${fixedCount} staj kaydƒ±ndan eksik √∂ƒüretmen referansƒ± kaldƒ±rƒ±ldƒ±`)
    
    // 3. √ñƒüretmenlerin aktif durumlarƒ±nƒ± kontrol et ve d√ºzelt
    console.log('\nüìã 3. √ñƒüretmenlerin aktif durumlarƒ± kontrol ediliyor...')
    
    const { data: ogretmenler } = await supabase
      .from('ogretmenler')
      .select('id, ad, soyad, aktif')
      .or('aktif.is.null,aktif.eq.undefined')
    
    if (ogretmenler && ogretmenler.length > 0) {
      console.log(`üìä ${ogretmenler.length} √∂ƒüretmenin aktif durumu d√ºzeltiliyor...`)
      
      for (const ogretmen of ogretmenler) {
        const { error: updateError } = await supabase
          .from('ogretmenler')
          .update({ aktif: true })
          .eq('id', ogretmen.id)
        
        if (updateError) {
          console.log(`‚ùå √ñƒüretmen ${ogretmen.ad} ${ogretmen.soyad} g√ºncellenemedi:`, updateError.message)
        } else {
          console.log(`‚úÖ ${ogretmen.ad} ${ogretmen.soyad} aktif durumu d√ºzeltildi`)
        }
      }
    }
    
    // 4. Ali Doƒüan'ƒ± √∂zel olarak kontrol et
    console.log('\nüìã 4. Ali Doƒüan √∂zel kontrol√º...')
    
    const { data: aliDogan } = await supabase
      .from('ogretmenler')
      .select('id, ad, soyad, aktif, tc_kimlik, telefon, email')
      .or('ad.ilike.%Ali%,soyad.ilike.%Doƒüan%')
    
    if (aliDogan && aliDogan.length > 0) {
      console.log('\nüîç Ali Doƒüan bilgileri:')
      aliDogan.forEach((ogretmen, index) => {
        console.log(`   ${index + 1}. ${ogretmen.ad} ${ogretmen.soyad}`)
        console.log(`      ID: ${ogretmen.id}`)
        console.log(`      Aktif: ${ogretmen.aktif}`)
        console.log(`      TC: ${ogretmen.tc_kimlik}`)
        console.log(`      Tel: ${ogretmen.telefon}`)
        console.log(`      Email: ${ogretmen.email}`)
        console.log()
      })
    }
    
    // 5. ƒ∞≈ületmelerdeki koordinat√∂r durumlarƒ±nƒ± kontrol et
    console.log('\nüìã 5. ƒ∞≈ületmelerdeki koordinat√∂r durumlarƒ± kontrol ediliyor...')
    
    const { data: isletmeler } = await supabase
      .from('isletmeler')
      .select('id, ad, koordinator_id')
      .not('koordinator_id', 'is', null)
    
    if (isletmeler) {
      console.log(`üìä ${isletmeler.length} i≈ületmede koordinat√∂r tanƒ±mlƒ±`)
      
      for (const isletme of isletmeler) {
        const { data: coordinator } = await supabase
          .from('ogretmenler')
          .select('id, ad, soyad, aktif')
          .eq('id', isletme.koordinator_id)
          .single()
        
        if (!coordinator) {
          console.log(`‚ùå ${isletme.ad} i≈ületmesinde koordinat√∂r bulunamadƒ± (ID: ${isletme.koordinator_id})`)
          
          // Koordinat√∂r√º kaldƒ±r
          const { error: updateError } = await supabase
            .from('isletmeler')
            .update({ koordinator_id: null })
            .eq('id', isletme.id)
          
          if (!updateError) {
            console.log(`‚úÖ ${isletme.ad} i≈ületmesinden koordinat√∂r kaldƒ±rƒ±ldƒ±`)
          }
        } else {
          console.log(`‚úÖ ${isletme.ad} -> ${coordinator.ad} ${coordinator.soyad} (Aktif: ${coordinator.aktif})`)
        }
      }
    }
    
    console.log('\n‚úÖ T√ºm d√ºzeltmeler tamamlandƒ±!')
    
  } catch (error) {
    console.error('‚ùå Genel hata:', error)
  }
}

// RPC fonksiyonu i√ßin SQL exec √∂zelliƒüini ekle
async function setupRPCFunction() {
  console.log('üîß RPC fonksiyonu kuruluyor...')
  
  const { error } = await supabase.rpc('exec_sql', {
    query: `
      CREATE OR REPLACE FUNCTION exec_sql(query text)
      RETURNS void AS $$
      BEGIN
        EXECUTE query;
      END;
      $$ LANGUAGE plpgsql SECURITY DEFINER;
    `
  })
  
  if (error) {
    console.log('‚ö†Ô∏è  RPC fonksiyonu kurulumu:', error.message)
  }
}

// Ana fonksiyon
async function main() {
  await setupRPCFunction()
  await fixStajTeacherConstraints()
}

main()
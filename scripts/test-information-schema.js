const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function testInformationSchema() {
    console.log('üîç Information Schema test ediliyor...\n');
    
    // Test 1: information_schema kullanarak trigger'larƒ± al
    console.log('1. Information Schema ile trigger\'larƒ± alma...');
    try {
        const { data, error } = await supabase
            .from('information_schema.triggers')
            .select('*')
            .eq('trigger_schema', 'public');
            
        if (error) {
            console.log('‚ùå Information Schema triggers hatasƒ±:', error.message);
        } else {
            console.log('‚úÖ Information Schema triggers ba≈üarƒ±lƒ±:', data ? data.length + ' kayƒ±t' : 'bo≈ü');
            if (data && data.length > 0) {
                console.log('ƒ∞lk trigger:', data[0]);
            }
        }
    } catch (error) {
        console.log('‚ùå Information Schema triggers exception:', error.message);
    }
    
    // Test 2: pg_class view'ini kontrol et
    console.log('\n2. pg_class eri≈üimi test ediliyor...');
    try {
        const { data, error } = await supabase
            .from('pg_class')
            .select('relname')
            .limit(5);
            
        if (error) {
            console.log('‚ùå pg_class hatasƒ±:', error.message);
        } else {
            console.log('‚úÖ pg_class ba≈üarƒ±lƒ±:', data ? data.length + ' kayƒ±t' : 'bo≈ü');
            if (data && data.length > 0) {
                console.log('ƒ∞lk class:', data[0]);
            }
        }
    } catch (error) {
        console.log('‚ùå pg_class exception:', error.message);
    }
    
    // Test 3: Supabase REST API ile schema bilgisi
    console.log('\n3. Supabase REST API ile schema bilgisi...');
    try {
        // Basit tablo listesi alma
        const { data, error } = await supabase
            .from('information_schema.tables')
            .select('table_name')
            .eq('table_schema', 'public')
            .limit(10);
            
        if (error) {
            console.log('‚ùå Schema tables hatasƒ±:', error.message);
        } else {
            console.log('‚úÖ Schema tables ba≈üarƒ±lƒ±:', data ? data.length + ' kayƒ±t' : 'bo≈ü');
            if (data && data.length > 0) {
                console.log('Tablolar:', data.map(t => t.table_name).join(', '));
            }
        }
    } catch (error) {
        console.log('‚ùå Schema tables exception:', error.message);
    }
    
    // Test 4: Raw SQL ile function test
    console.log('\n4. Function definitions SQL test...');
    try {
        const funcQuery = `
          SELECT 
            p.proname as function_name,
            n.nspname as schema_name
          FROM pg_proc p
          JOIN pg_namespace n ON p.pronamespace = n.oid
          WHERE n.nspname = 'public'
          LIMIT 5;
        `;
        
        // exec_sql yerine ba≈üka bir yol deneyelim
        console.log('exec_sql sorgusu:', funcQuery);
        const { data, error } = await supabase.rpc('exec_sql', { query: funcQuery });
        
        console.log('Sonu√ß tipi:', typeof data);
        console.log('Sonu√ß:', data);
        
        if (error) {
            console.log('‚ùå Function definitions hatasƒ±:', error.message);
        }
    } catch (error) {
        console.log('‚ùå Function definitions exception:', error.message);
    }
}

testInformationSchema().catch(console.error);
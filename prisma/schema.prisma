// MariaDB/MySQL + Prisma Schema for Okul Dekont System
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  adminProfile          AdminProfile?
  teacherProfile        TeacherProfile?
  companyProfile        CompanyProfile?
  terminatedInternships Staj[]              @relation("TerminatedBy")
  modifiedInternships   Staj[]              @relation("LastModifiedBy")
  internshipHistory     InternshipHistory[]
  teacherAssignments    TeacherAssignmentHistory[] @relation("TeacherAssignmentPerformer")
  
  // Messaging Relations
  conversations         ConversationParticipant[]
  sentMessages          Message[]
  messageReads          MessageRead[]
  presence              UserPresence?
  messageNotifications  MessageNotification[]
  
  @@map("users")
}

model AdminProfile {
  id     String  @id @default(cuid())
  name   String
  email  String? @unique
  role   Role    @default(ADMIN)
  userId String  @unique
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("admin_profiles")
}

model TeacherProfile {
  id       String  @id @default(cuid())
  name     String
  surname  String
  tcNo     String? @unique
  phone    String?
  email    String?
  pin      String
  userId   String  @unique
  alanId   String?
  position String? // alan_sefi, atolye_sefi
  active   Boolean @default(true)
  isLocked Boolean @default(false)
  lockStartTime DateTime?
  failedAttempts Int @default(0)
  lastFailedAttempt DateTime?
  mustChangePin Boolean @default(false)

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  alan Alan? @relation(fields: [alanId], references: [id])

  // Relations
  stajlar                    Staj[]
  dekontlar                  Dekont[]
  companies                  CompanyProfile[]
  gorevBelgeleri             GorevBelgesi[]
  belgeler                   Belge[]
  teacherAssignments         TeacherAssignmentHistory[]
  previousTeacherAssignments TeacherAssignmentHistory[] @relation("PreviousTeacherAssignment")
  pinAttempts                PinAttempt[] @relation("TeacherPinAttempts")
  koordinatorlukProgrami     KoordinatorlukProgrami[]

  @@map("teachers")
}

model CompanyProfile {
  id                      String    @id @default(cuid())
  name                    String
  contact                 String
  phone                   String?
  email                   String?
  address                 String?
  taxNumber               String?
  pin                     String
  userId                  String?   @unique
  teacherId               String?
  teacherAssignedAt       DateTime?
  activityField           String?
  bankAccountNo           String?
  employeeCount           String?
  stateContributionRequest String?
  masterTeacherName       String?
  masterTeacherPhone      String?
  isLocked                Boolean   @default(false)
  lockStartTime           DateTime?
  failedAttempts          Int       @default(0)
  lastFailedAttempt       DateTime?
  mustChangePin           Boolean   @default(false)

  user    User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  teacher TeacherProfile? @relation(fields: [teacherId], references: [id])

  // Relations
  stajlar                 Staj[]
  dekontlar               Dekont[]
  students                Student[]
  belgeler                Belge[]
  teacherAssignmentHistory TeacherAssignmentHistory[]
  pinAttempts             PinAttempt[] @relation("CompanyPinAttempts")
  koordinatorlukProgrami  KoordinatorlukProgrami[]

  @@map("companies")
}

// Core Entities
model EgitimYili {
  id        String    @id @default(cuid())
  year      String    @unique
  startDate DateTime?
  endDate   DateTime?
  active    Boolean   @default(false)
  
  // Relations
  stajlar Staj[]
  
  @@map("education_years")
}

model Alan {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  active      Boolean @default(true)
  
  // Relations
  teachers   TeacherProfile[]
  students   Student[]
  classes    Class[]
  wageRates  WageRate[]
  
  @@map("fields")
}

model Class {
  id              String @id @default(cuid())
  name            String
  alanId          String
  dal             String? // Branch/Track information
  haftalik_program Json?   // Weekly schedule as JSON
  
  alan Alan @relation(fields: [alanId], references: [id], onDelete: Cascade)
  
  // Relations
  students Student[]
  
  @@map("classes")
}

model Student {
  id            String    @id @default(cuid())
  name          String
  surname       String
  className     String
  number        String?
  tcNo          String?
  phone         String?
  email         String?
  gender        String?   // Cinsiyet (Erkek/Kız)
  birthDate     DateTime? // Doğum tarihi
  parentName    String?
  parentSurname String?   // Veli soyadı
  parentPhone   String?
  alanId        String
  companyId     String?
  classId       String?
  
  alan    Alan            @relation(fields: [alanId], references: [id])
  company CompanyProfile? @relation(fields: [companyId], references: [id])
  class   Class?          @relation(fields: [classId], references: [id])
  
  // Relations
  stajlar     Staj[]
  dekontlar   Dekont[]
  attendance  Attendance[]
  
  @@map("students")
}

model Staj {
  id                    String     @id @default(cuid())
  studentId             String
  companyId             String
  teacherId             String?
  educationYearId       String
  startDate             DateTime
  endDate               DateTime
  status                StajStatus @default(ACTIVE)
  terminationDate       DateTime?
  terminationReason     String?
  terminatedBy          String?
  terminationDocumentId String?
  terminationNotes      String?
  lastModifiedBy        String?
  lastModifiedAt        DateTime?
  createdAt             DateTime   @default(now())
  
  student             Student         @relation(fields: [studentId], references: [id])
  company             CompanyProfile  @relation(fields: [companyId], references: [id])
  teacher             TeacherProfile? @relation(fields: [teacherId], references: [id])
  educationYear       EgitimYili     @relation(fields: [educationYearId], references: [id])
  terminatedByUser    User?          @relation("TerminatedBy", fields: [terminatedBy], references: [id])
  terminationDocument Belge?         @relation("TerminationDocument", fields: [terminationDocumentId], references: [id])
  lastModifiedByUser  User?          @relation("LastModifiedBy", fields: [lastModifiedBy], references: [id])
  
  // Relations
  dekontlar         Dekont[]
  history           InternshipHistory[]
  relatedDocuments  Belge[]             @relation("RelatedInternship")
  
  @@index([studentId, status])
  @@index([companyId, status])
  @@index([teacherId, status])
  @@map("internships")
}

model InternshipHistory {
  id            String            @id @default(cuid())
  internshipId  String
  action        InternshipAction
  previousData  Json?
  newData       Json?
  performedBy   String
  performedAt   DateTime          @default(now())
  reason        String?
  notes         String?
  
  // Relations
  internship    Staj             @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  performer     User             @relation(fields: [performedBy], references: [id])
  
  @@index([internshipId])
  @@index([performedAt])
  @@map("internship_history")
}

model Dekont {
  id           String       @id @default(cuid())
  stajId       String
  companyId    String
  teacherId    String?
  studentId    String
  amount       Decimal?     @db.Decimal(10, 2)
  paymentDate  DateTime
  month        Int
  year         Int
  status       DekontStatus @default(PENDING)
  approvedBy   String?
  approvedAt   DateTime?
  rejectedBy   String?
  rejectedAt   DateTime?
  rejectReason String?
  fileUrl      String?
  createdAt    DateTime     @default(now())
  
  staj      Staj            @relation(fields: [stajId], references: [id])
  company   CompanyProfile  @relation(fields: [companyId], references: [id])
  teacher   TeacherProfile? @relation(fields: [teacherId], references: [id])
  student   Student         @relation(fields: [studentId], references: [id])
  
  @@map("dekonts")
}

model GorevBelgesi {
  id            String   @id @default(cuid())
  ogretmenId    String
  hafta         String
  isletmeIdler  String   // JSON array stored as string
  durum         String   @default("Verildi")
  barcode       String?  @unique // Barcode for tracking
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  teacher TeacherProfile @relation(fields: [ogretmenId], references: [id])
  
  @@map("gorev_belgeleri")
}

// Belgeler için ayrı tablo
model Belge {
  id                    String       @id @default(cuid())
  ad                    String
  belgeTuru             String       // Belge türü (sözleşme, protocol vb.)
  documentType          DocumentType?
  dosyaUrl              String       // Dosya yolu
  dosyaAdi              String       // Orijinal dosya adı
  yuklenenTaraf         String       // "ogretmen" veya "isletme"
  ogretmenId            String?
  isletmeId             String?
  relatedInternshipId   String?
  status                BelgeStatus  @default(PENDING)
  onaylayanId           String?      // Admin/onaylayan kişinin ID'si
  onaylanmaTarihi       DateTime?    // Onaylanma tarihi
  redNedeni             String?      // Reddedilme nedeni
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  
  teacher               TeacherProfile? @relation(fields: [ogretmenId], references: [id])
  company               CompanyProfile? @relation(fields: [isletmeId], references: [id])
  relatedInternship     Staj?           @relation("RelatedInternship", fields: [relatedInternshipId], references: [id])
  terminatedInternships Staj[]          @relation("TerminationDocument")
  
  @@map("belgeler")
}

// Notifications
model Notification {
  id             String   @id @default(cuid())
  title          String
  content        String   @db.Text
  priority       NotificationPriority @default(NORMAL)
  recipient_id   String
  recipient_type String   // 'ogretmen', 'isletme', 'admin'
  sent_by        String
  is_read        Boolean  @default(false)
  read_at        DateTime?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  
  @@map("notifications")
}

// Teacher Assignment History for Companies
model TeacherAssignmentHistory {
  id             String    @id @default(cuid())
  companyId      String
  teacherId      String?
  previousTeacherId String?
  assignedAt     DateTime  @default(now())
  assignedBy     String    // Admin user who made the assignment
  reason         String?   // Reason for assignment/change
  notes          String?   // Additional notes
  
  company        CompanyProfile  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  teacher        TeacherProfile? @relation(fields: [teacherId], references: [id])
  previousTeacher TeacherProfile? @relation("PreviousTeacherAssignment", fields: [previousTeacherId], references: [id])
  assignedByUser User      @relation("TeacherAssignmentPerformer", fields: [assignedBy], references: [id])
  
  @@index([companyId])
  @@index([teacherId])
  @@index([assignedAt])
  @@map("teacher_assignment_history")
}

// PIN Security System
model PinAttempt {
  id           String   @id @default(cuid())
  entityType   String   // 'teacher' or 'company'
  entityId     String   // Generic ID for teacher or company
  teacherId    String?  // Specific teacher ID
  companyId    String?  // Specific company ID
  ipAddress    String?
  userAgent    String?
  successful   Boolean  @default(false)
  attemptedAt  DateTime @default(now())
  
  // Relations
  teacher      TeacherProfile? @relation("TeacherPinAttempts", fields: [teacherId], references: [id])
  company      CompanyProfile? @relation("CompanyPinAttempts", fields: [companyId], references: [id])
  
  @@index([entityType, entityId])
  @@index([attemptedAt])
  @@map("pin_attempts")
}

// Attendance & Holiday Management
model Attendance {
  id          String   @id @default(cuid())
  studentId   String
  month       Int
  year        Int
  absentDays  Int      @default(0)
  totalDays   Int      // Total working days in that month
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  student     Student  @relation(fields: [studentId], references: [id])
  
  @@unique([studentId, month, year])
  @@map("attendance")
}

model PublicHoliday {
  id          String   @id @default(cuid())
  name        String
  date        DateTime
  month       Int
  year        Int
  createdAt   DateTime @default(now())
  
  @@unique([date])
  @@map("public_holidays")
}

// Daily wage rates
model WageRate {
  id          String   @id @default(cuid())
  alanId      String?  // If null, applies to all fields
  dailyRate   Decimal  @db.Decimal(10, 2)
  validFrom   DateTime
  validTo     DateTime?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  alan        Alan?    @relation(fields: [alanId], references: [id])
  
  @@map("wage_rates")
}

// Koordinatörlük Programı
model KoordinatorlukProgrami {
  id           String @id @default(cuid())
  ogretmenId   String
  gun          String
  saatAraligi  String
  isletmeId    String
  createdAt    DateTime @default(now())
  
  teacher      TeacherProfile @relation(fields: [ogretmenId], references: [id], onDelete: Cascade)
  company      CompanyProfile @relation(fields: [isletmeId], references: [id], onDelete: Cascade)
  
  @@unique([ogretmenId, gun, saatAraligi])
  @@map("koordinatorluk_programi")
}

// System Settings
model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  @@map("system_settings")
}

// SMS System Tables
model SMSSettings {
  id          String  @id @default(cuid())
  provider    String  // 'twilio', 'jetimsi', etc.
  apiKey      String
  apiSecret   String
  senderName  String?
  enabled     Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("sms_settings")
}

model SMSTemplate {
  id           String   @id @default(cuid())
  name         String   @unique
  content      String   @db.Text
  variables    Json?    // {student_name, company_name, etc.}
  triggerEvent String   // 'internship_created', 'dekont_approved', etc.
  enabled      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  smsHistory   SMSHistory[]
  
  @@map("sms_templates")
}

model SMSHistory {
  id            String      @id @default(cuid())
  templateId    String?
  recipientPhone String
  recipientName String?
  message       String      @db.Text
  status        SMSStatus   @default(PENDING)
  providerId    String?     // Twilio message SID
  errorMessage  String?
  createdAt     DateTime    @default(now())
  sentAt        DateTime?
  
  // Relations
  template      SMSTemplate? @relation(fields: [templateId], references: [id])
  
  @@index([recipientPhone])
  @@index([status])
  @@index([createdAt])
  @@map("sms_history")
}

// Enums
enum Role {
  USER
  ADMIN
  TEACHER
  COMPANY
}

enum StajStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  TERMINATED
  SUSPENDED
  PENDING_TERMINATION
}

enum DekontStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BelgeStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
}

enum InternshipAction {
  CREATED
  ASSIGNED
  COMPANY_CHANGED
  TEACHER_CHANGED
  TERMINATED
  REACTIVATED
  COMPLETED
  UPDATED
}

enum DocumentType {
  ASSIGNMENT_DOCUMENT
  TERMINATION_DOCUMENT
  COMPLETION_CERTIFICATE
  EVALUATION_FORM
  OTHER
}

enum SMSStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
  UNDELIVERED
}

// Messaging System Tables
model Conversation {
  id            String             @id @default(cuid())
  title         String?            // For group conversations
  type          ConversationType   @default(DIRECT)
  isGroup       Boolean            @default(false)
  description   String?
  avatar        String?            // Group avatar URL
  isArchived    Boolean            @default(false)
  lastMessageAt DateTime?
  createdBy     String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  
  // Relations
  participants  ConversationParticipant[]
  messages      Message[]
  notifications MessageNotification[]
  
  @@index([type])
  @@index([lastMessageAt])
  @@index([createdAt])
  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?
  isActive       Boolean      @default(true)
  lastReadAt     DateTime?
  notificationSettings Json?  // Custom notification settings per conversation
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([conversationId, userId])
  @@index([userId])
  @@index([conversationId])
  @@map("conversation_participants")
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  senderId       String
  content        String?       @db.Text
  messageType    MessageType   @default(TEXT)
  attachments    Json?         // Array of file attachments
  metadata       Json?         // Additional message metadata
  parentId       String?       // For reply/thread functionality
  isEdited       Boolean       @default(false)
  editedAt       DateTime?
  isDeleted      Boolean       @default(false)
  deletedAt      DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // Relations
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User          @relation(fields: [senderId], references: [id])
  parent         Message?      @relation("MessageReplies", fields: [parentId], references: [id])
  replies        Message[]     @relation("MessageReplies")
  readReceipts   MessageRead[]
  notifications  MessageNotification[]
  
  @@index([conversationId, createdAt])
  @@index([senderId])
  @@index([messageType])
  @@index([parentId])
  @@map("messages")
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  
  // Relations
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId])
  @@index([userId])
  @@index([readAt])
  @@map("message_reads")
}

model UserPresence {
  id           String        @id @default(cuid())
  userId       String        @unique
  status       PresenceStatus @default(OFFLINE)
  lastSeenAt   DateTime      @default(now())
  customStatus String?
  isTyping     Boolean       @default(false)
  typingIn     String?       // conversationId if typing
  updatedAt    DateTime      @updatedAt
  
  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([status])
  @@index([lastSeenAt])
  @@map("user_presence")
}

model MessageNotification {
  id             String        @id @default(cuid())
  userId         String
  conversationId String
  messageId      String
  type           NotificationType @default(MESSAGE)
  isRead         Boolean       @default(false)
  isMuted        Boolean       @default(false)
  createdAt      DateTime      @default(now())
  readAt         DateTime?
  
  // Relations
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  message        Message       @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@unique([userId, messageId])
  @@index([userId, isRead])
  @@index([conversationId])
  @@map("message_notifications")
}

// Messaging Enums
enum ConversationType {
  DIRECT      // 1-on-1 conversation
  GROUP       // Multi-user group
  BROADCAST   // One-to-many broadcast
  SYSTEM      // System announcements
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
  SYSTEM      // System-generated messages
  ANNOUNCEMENT
  LOCATION
}

enum ParticipantRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

enum PresenceStatus {
  ONLINE
  AWAY
  BUSY
  OFFLINE
  INVISIBLE
}

enum NotificationType {
  MESSAGE
  MENTION
  REACTION
  SYSTEM
}